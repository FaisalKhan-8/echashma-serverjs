generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int       @id @default(autoincrement())
  name                 String?
  email                String    @unique
  password             String
  avatar               String?   @default("https://img.freepik.com/free-vector/illustration-businessman_53876-5856.jpg")
  role                 String    @default("MANAGER")
  created_at           DateTime  @default(now())
  updated_at           DateTime  @default(now()) @updatedAt
  uuid                 String    @unique @default(uuid())
  companyId            Int?
  password_visible     String
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  products             Product[]
  company              Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  branches             Branch[]  @relation("UserBranches")
}

model Company {
  id              Int               @id @default(autoincrement())
  companyName     String            @unique
  address         String?
  contactPerson   String
  phone           String?
  email           String            @unique
  gst             String?           @unique
  pancard         String?
  companyLogo     String?
  aadhaarcard     String?
  created_at      DateTime          @default(now())
  updated_at      DateTime          @default(now()) @updatedAt
  uuid            String            @unique @default(uuid())
  branches        Branch[]          @relation("CompanyBranches")
  CoatingType     CoatingType[]
  CustomerInvoice CustomerInvoice[]
  Expense         Expense[]
  ExpenseCategory ExpenseCategory[]
  FrameType       FrameType[]
  Inventory       Inventory[]
  products        Product[]
  Purchase        Purchase[]
  ShapeType       ShapeType[]
  Supplier        Supplier[]
  users           User[]
  VisionType      VisionType[]
  Brands          Brands[]
}

model Branch {
  id              Int               @id @default(autoincrement())
  branchName      String
  address         String
  phone           String
  email           String?
  contactPerson   String
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  uuid            String            @unique @default(uuid())
  companyId       Int
  company         Company           @relation("CompanyBranches", fields: [companyId], references: [id], onDelete: Cascade)
  CustomerInvoice CustomerInvoice[]
  users           User[]            @relation("UserBranches")

  @@unique([branchName, companyId])
}

model Product {
  id                  Int                   @id @default(autoincrement())
  code                String
  name                String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  userId              Int?
  uuid                String                @unique @default(uuid())
  companyId           Int?
  CustomerInvoiceItem CustomerInvoiceItem[]
  Inventory           Inventory[]
  Company             Company?              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user                User?                 @relation(fields: [userId], references: [id])
  PurchaseItem        PurchaseItem[]
  suppliers           Supplier[]            @relation("ProductToSupplier")
}

model Supplier {
  id            Int        @id @default(autoincrement())
  code          String
  name          String
  address       String
  contactPerson String
  contactNo     String
  email         String     @unique
  gstin         String?    @unique
  uin           String?
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  uuid          String     @unique @default(uuid())
  companyId     Int?
  Purchase      Purchase[]
  Company       Company?   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  products      Product[]  @relation("ProductToSupplier")
}

model FrameType {
  id                  Int                   @id @default(autoincrement())
  code                String
  name                String
  companyId           Int?
  CustomerInvoiceItem CustomerInvoiceItem[]
  Company             Company?              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Inventory           Inventory[]
  PurchaseItem        PurchaseItem[]
}

model ShapeType {
  id                  Int                   @id @default(autoincrement())
  code                String
  name                String
  companyId           Int?
  CustomerInvoiceItem CustomerInvoiceItem[]
  Inventory           Inventory[]
  PurchaseItem        PurchaseItem[]
  Company             Company?              @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model VisionType {
  id        Int      @id @default(autoincrement())
  code      String
  name      String
  companyId Int?
  Company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model CoatingType {
  id        Int      @id @default(autoincrement())
  code      String
  name      String
  companyId Int?
  Company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Brands {
  id                  Int                   @id @default(autoincrement())
  code                String
  name                String
  companyId           Int?
  company             Company?              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  CustomerInvoiceItem CustomerInvoiceItem[]
  Inventory           Inventory[]
  PurchaseItem        PurchaseItem[]
}

model Purchase {
  id           Int            @id @default(autoincrement())
  purchaseDate DateTime
  billNo       String
  supplierId   Int
  totalAmount  Float
  totalCGST    Float?
  totalSGST    Float?
  netTotal     Float
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  companyId    Int?
  Company      Company?       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  supplier     Supplier       @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  items        PurchaseItem[] @relation("PurchaseToPurchaseItem")
}

model PurchaseItem {
  id          Int        @id @default(autoincrement())
  purchaseId  Int
  productId   Int
  quantity    Int
  rate        Float
  amount      Float
  cgst        Float?
  sgst        Float?
  discount    Float?     @default(0)
  frameTypeId Int?
  shapeTypeId Int?
  modalNo     String?
  brandId     Int?
  Brand       Brands?    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  FrameType   FrameType? @relation(fields: [frameTypeId], references: [id], onDelete: Cascade)
  product     Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  purchase    Purchase   @relation("PurchaseToPurchaseItem", fields: [purchaseId], references: [id], onDelete: Cascade)
  ShapeType   ShapeType? @relation(fields: [shapeTypeId], references: [id], onDelete: Cascade)
}

model CustomerInvoice {
  id               Int                   @id @default(autoincrement())
  customerName     String
  customerPhone    String
  createdAt        DateTime              @default(now())
  orderNo          String                @unique
  totalAmount      Float
  updatedAt        DateTime              @updatedAt
  advance          Float
  balance          Float
  customerLocation String
  grandTotal       Float
  totalCGST        Float                 @default(0)
  totalSGST        Float                 @default(0)
  totalGST         Float                 @default(0)
  orderDate        DateTime
  testedBy         String?
  companyId        Int
  discount         Float                 @default(0)
  branchId         Int?
  branch           Branch?               @relation(fields: [branchId], references: [id], onDelete: Cascade)
  company          Company               @relation(fields: [companyId], references: [id], onDelete: Cascade)
  items            CustomerInvoiceItem[] @relation("InvoiceToInvoiceItem")
}

model CustomerInvoiceItem {
  id              Int             @id @default(autoincrement())
  invoiceId       Int
  productId       Int
  quantity        Int
  rate            Float
  amount          Float
  discount        Float?          @default(0)
  modalNo         String?
  frameTypeId     Int
  shapeTypeId     Int
  brandId         Int
  leftEye         Json? // e.g., { SPH: 5, CYL: 2, AXIS: 6, ADD: 6 }
  rightEye        Json? // e.g., { SPH: 10, CYL: 10, AXIS: 2, ADD: 3 }
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  cgst            Float?
  sgst            Float?
  brands          Brands          @relation(fields: [brandId], references: [id], onDelete: Cascade)
  frameType       FrameType       @relation(fields: [frameTypeId], references: [id], onDelete: Cascade)
  customerInvoice CustomerInvoice @relation("InvoiceToInvoiceItem", fields: [invoiceId], references: [id], onDelete: Cascade)
  product         Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  shapeType       ShapeType       @relation(fields: [shapeTypeId], references: [id], onDelete: Cascade)
}

model Inventory {
  id          Int        @id @default(autoincrement())
  productId   Int
  modalNo     String?
  shapeTypeId Int?
  frameTypeId Int?
  stock       Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  brandId     Int?
  companyId   Int
  brands      Brands?    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  company     Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  frameType   FrameType? @relation(fields: [frameTypeId], references: [id], onDelete: Cascade)
  product     Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  shapeType   ShapeType? @relation(fields: [shapeTypeId], references: [id], onDelete: Cascade)
}

model ExpenseCategory {
  id         Int       @id @default(autoincrement())
  name       String
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  companyId  Int?
  expenses   Expense[]
  Company    Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Expense {
  id          Int             @id @default(autoincrement())
  amount      Float
  description String?
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt
  categoryId  Int
  companyId   Int?
  category    ExpenseCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  Company     Company?        @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Prescription {
  id        Int      @id @default(autoincrement())
  value     Float
  field     String
  side      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([side, field, value])
}

enum EyeSide {
  left
  right
}

enum PrescriptionField {
  SPH
  CYL
  AXIS
  ADD
}
