generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum to define the eye side (left or right)
enum EyeSide {
  left
  right
}

// Enum for prescription field types (SPH, CYL, AXIS, ADD)
enum PrescriptionField {
  SPH
  CYL
  AXIS
  ADD
}

model User {
  id               Int       @id @default(autoincrement())
  name             String?
  email            String    @unique
  password         String
  password_visible String
  avatar           String?   @default("https://img.freepik.com/free-vector/illustration-businessman_53876-5856.jpg")
  role             String    @default("MANAGER") // Default role for users
  created_at       DateTime  @default(now())
  updated_at       DateTime  @default(now()) @updatedAt
  uuid             String    @unique @default(uuid())
  companyId        Int? // Foreign key to reference Company
  company          Company?  @relation(fields: [companyId], references: [id]) // Relation to the Company model
  branches         Branch[]  @relation("UserBranches")
  products         Product[]
}

model Company {
  id            Int      @id @default(autoincrement())
  companyName   String   @unique
  address       String?
  contactPerson String
  phone         String?
  email         String   @unique
  gst           String?  @unique // Optional: Review uniqueness requirement
  pancard       String?
  aadhaarcard   String?
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now()) @updatedAt
  uuid          String   @unique @default(uuid())

  branches Branch[] @relation("CompanyBranches") // Relationship to Branch model
  users    User[] // This is the plural form indicating one company can have many users

  products        Product[]
  ExpenseCategory ExpenseCategory[]
  Expense         Expense[]
  CustomerInvoice CustomerInvoice[]
  Purchase        Purchase[]
  Brands          Brands[]
  CoatingType     CoatingType[]
  VisionType      VisionType[]
  ShapeType       ShapeType[]
  FrameType       FrameType[]
  Supplier        Supplier[]
  Inventory       Inventory[]
}

model Branch {
  id            Int      @id @default(autoincrement())
  branchName    String   @unique
  address       String
  phone         String
  email         String?
  contactPerson String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  uuid          String   @unique @default(uuid())

  company   Company @relation("CompanyBranches", fields: [companyId], references: [id])
  companyId Int // Foreign key to Company
  users     User[]  @relation("UserBranches") // Many-to-many relation with User
}

model Product {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  code      String   @unique
  userId    Int? // Optional userId
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  uuid      String   @unique @default(uuid()) // Optional uuid

  PurchaseItem        PurchaseItem[]
  suppliers           Supplier[]
  Company             Company?              @relation(fields: [companyId], references: [id])
  companyId           Int?
  Inventory           Inventory[]
  CustomerInvoiceItem CustomerInvoiceItem[]
}

model Supplier {
  id            Int      @id @default(autoincrement())
  code          String   @unique // Ensure `code` is unique
  name          String   @unique // Ensure `name` is unique
  address       String // Supplier address
  contactPerson String // Contact person for the supplier
  contactNo     String // Contact number for the supplier
  email         String   @unique // Supplier's email
  gstin         String?  @unique // Optional GSTIN number
  uin           String? // Optional UIN number
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  uuid          String   @unique @default(uuid())

  products  Product[]
  Purchase  Purchase[]
  Company   Company?   @relation(fields: [companyId], references: [id])
  companyId Int?
}

model FrameType {
  id                  Int                   @id @default(autoincrement())
  code                String                @unique // Ensure `code` is unique
  name                String                @unique // Ensure `name` is unique
  Company             Company?              @relation(fields: [companyId], references: [id])
  companyId           Int?
  PurchaseItem        PurchaseItem[]
  Inventory           Inventory[]
  CustomerInvoiceItem CustomerInvoiceItem[]
}

model ShapeType {
  id                  Int                   @id @default(autoincrement())
  code                String                @unique // Ensure `code` is unique
  name                String                @unique // Ensure `name` is unique
  Company             Company?              @relation(fields: [companyId], references: [id])
  companyId           Int?
  PurchaseItem        PurchaseItem[]
  Inventory           Inventory[]
  CustomerInvoiceItem CustomerInvoiceItem[]
}

model VisionType {
  id        Int      @id @default(autoincrement())
  code      String   @unique // Ensure `code` is unique
  name      String   @unique // Ensure `name` is unique
  Company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?
}

model CoatingType {
  id        Int      @id @default(autoincrement())
  code      String   @unique // Ensure `code` is unique
  name      String   @unique // Ensure `name` is unique
  Company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?
}

model Brands {
  id                  Int                   @id @default(autoincrement())
  code                String                @unique // Ensure `code` is unique
  name                String                @unique // Ensure `name` is unique  
  Company             Company?              @relation(fields: [companyId], references: [id])
  companyId           Int?
  PurchaseItem        PurchaseItem[]
  Inventory           Inventory[]
  CustomerInvoiceItem CustomerInvoiceItem[]
}

model Purchase {
  id           Int      @id @default(autoincrement())
  purchaseDate DateTime // Purchase date
  billNo       String   @unique
  supplierId   Int // Foreign key to Supplier model
  totalAmount  Float // Total purchase amount
  totalCGST    Float? // CGST amount
  totalSGST    Float? // SGST amount
  netTotal     Float // Final net total

  supplier Supplier       @relation(fields: [supplierId], references: [id])
  items    PurchaseItem[] @relation("PurchaseToPurchaseItem") // No onDelete here

  createdAt DateTime @default(now()) // Creation timestamp
  updatedAt DateTime @updatedAt // Update timestamp

  Company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?
}

model PurchaseItem {
  id         Int    @id @default(autoincrement())
  purchaseId Int // Foreign key to Purchase
  productId  Int // Foreign key to Product model
  quantity   Int // Product quantity
  modalNo    String
  rate       Float // Rate per product
  amount     Float // Total amount for the product (rate * quantity)
  cgst       Float? // CGST for the product
  sgst       Float? // SGST for the product
  discount   Float? @default(0)

  purchase    Purchase   @relation("PurchaseToPurchaseItem", fields: [purchaseId], references: [id], onDelete: Cascade) // Enable cascading delete
  Product     Product    @relation(fields: [productId], references: [id])
  Brand       Brands?    @relation(fields: [brandId], references: [id])
  brandId     Int?
  FrameType   FrameType? @relation(fields: [frameTypeId], references: [id])
  frameTypeId Int?
  ShapeType   ShapeType? @relation(fields: [shapeTypeId], references: [id])
  shapeTypeId Int?
}

model CustomerInvoice {
  id               Int      @id @default(autoincrement())
  customerName     String
  customerPhone    String
  customerLocation String
  orderNo          String   @unique
  orderDate        DateTime
  testedBy         String?
  grandTotal       Float
  advance          Float
  balance          Float
  totalAmount      Float

  rightEye Json // Store the prescription for right eye
  leftEye  Json // Store the prescription for left eye
  discount Float @default(0)

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  items CustomerInvoiceItem[] @relation("InvoiceToInvoiceItem")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CustomerInvoiceItem {
  id          Int    @id @default(autoincrement())
  invoiceId   Int
  productId   Int
  quantity    Int
  rate        Float
  amount      Float
  discount    Float? @default(0)
  modalNo     String
  frameTypeId Int
  shapeTypeId Int
  brandId     Int

  customerInvoice CustomerInvoice @relation("InvoiceToInvoiceItem", fields: [invoiceId], references: [id], onDelete: Cascade)
  product         Product         @relation(fields: [productId], references: [id])
  brands          Brands          @relation(fields: [brandId], references: [id])
  frameType       FrameType       @relation(fields: [frameTypeId], references: [id])
  shapeType       ShapeType       @relation(fields: [shapeTypeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// inventory
model Inventory {
  id          Int      @id @default(autoincrement())
  productId   Int // Foreign key to Product model
  modalNo     String
  shapeTypeId Int?
  brandId     Int?
  frameTypeId Int?
  companyId   Int
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  product   Product    @relation(fields: [productId], references: [id])
  shapeType ShapeType? @relation(fields: [shapeTypeId], references: [id])
  brands    Brands?    @relation(fields: [brandId], references: [id])
  frameType FrameType? @relation(fields: [frameTypeId], references: [id])
  company   Company    @relation(fields: [companyId], references: [id])
}

model ExpenseCategory {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  expenses   Expense[] // One-to-many relationship
  Company    Company?  @relation(fields: [companyId], references: [id])
  companyId  Int?
}

model Expense {
  id          Int             @id @default(autoincrement())
  amount      Float
  description String
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt
  categoryId  Int // Foreign key reference
  category    ExpenseCategory @relation(fields: [categoryId], references: [id]) // Establishing the relationship
  Company     Company?        @relation(fields: [companyId], references: [id])
  companyId   Int?
}

// Prescription model that stores prescription data
model Prescription {
  id        Int      @id @default(autoincrement())
  side      String
  field     String
  value     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([side, field, value])
}
