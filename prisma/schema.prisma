generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int        @id @default(autoincrement())
  name             String?
  email            String     @unique
  password         String
  password_visible String
  avatar           String?    @default("https://img.freepik.com/free-vector/illustration-businessman_53876-5856.jpg")
  role             String     @default("MANAGER") // Default role for users
  created_at       DateTime   @default(now())
  updated_at       DateTime   @default(now()) @updatedAt
  uuid             String     @unique @default(uuid())
  companyId        Int? // Foreign key to reference Company
  company          Company?   @relation(fields: [companyId], references: [id]) // Relation to the Company model
  branches         Branch[]   @relation("UserBranches")
  products         Product[]
  purchases        Purchase[]
}

model Company {
  id            Int      @id @default(autoincrement())
  companyName   String   @unique
  address       String
  contactPerson String
  phone         String
  email         String   @unique
  gst           String?  @unique // Optional: Review uniqueness requirement
  pancard       String
  aadhaarcard   String
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now()) @updatedAt
  uuid          String   @unique @default(uuid())

  branches Branch[] @relation("CompanyBranches") // Relationship to Branch model
  users    User[] // This is the plural form indicating one company can have many users
}

model Branch {
  id            Int      @id @default(autoincrement())
  branchName    String   @unique
  address       String
  phone         String
  email         String?  @unique
  contactPerson String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  uuid          String   @unique @default(uuid())

  company   Company    @relation("CompanyBranches", fields: [companyId], references: [id])
  companyId Int // Foreign key to Company
  users     User[]     @relation("UserBranches") // Many-to-many relation with User
  products  Product[]  @relation("BranchProducts")
  purchases Purchase[]
}

model Product {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  code      String   @unique
  userId    Int? // Optional userId
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  uuid      String   @unique @default(uuid()) // Optional uuid

  branches        Branch[]          @relation("BranchProducts")
  PurchaseItem    PurchaseItem[]
  suppliers       Supplier[]
  CustomerInvoice CustomerInvoice[]
}

model Supplier {
  id            Int      @id @default(autoincrement())
  code          String   @unique // Ensure `code` is unique
  name          String   @unique // Ensure `name` is unique
  address       String // Supplier address
  contactPerson String // Contact person for the supplier
  contactNo     String // Contact number for the supplier
  email         String   @unique // Supplier's email
  gstin         String?  @unique // Optional GSTIN number
  uin           String? // Optional UIN number
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  uuid          String   @unique @default(uuid())

  products Product[]
  Purchase Purchase[]
}

model FrameType {
  id              Int               @id @default(autoincrement())
  code            String            @unique // Ensure `code` is unique
  name            String            @unique // Ensure `name` is unique
  CustomerInvoice CustomerInvoice[]
}

model ShapeType {
  id              Int               @id @default(autoincrement())
  code            String            @unique // Ensure `code` is unique
  name            String            @unique // Ensure `name` is unique
  CustomerInvoice CustomerInvoice[]
}

model VisionType {
  id   Int    @id @default(autoincrement())
  code String @unique // Ensure `code` is unique
  name String @unique // Ensure `name` is unique
}

model CoatingType {
  id   Int    @id @default(autoincrement())
  code String @unique // Ensure `code` is unique
  name String @unique // Ensure `name` is unique
}

model Brands {
  id              Int               @id @default(autoincrement())
  code            String            @unique // Ensure `code` is unique
  name            String            @unique // Ensure `name` is unique  
  CustomerInvoice CustomerInvoice[]
}

model Purchase {
  id           Int      @id @default(autoincrement())
  purchaseDate DateTime // Purchase date
  billNo       String   @unique
  supplierId   Int // Foreign key to Supplier model
  totalAmount  Float // Total purchase amount
  totalCGST    Float? // CGST amount
  totalSGST    Float? // SGST amount
  netTotal     Float // Final net total

  supplier Supplier       @relation(fields: [supplierId], references: [id])
  items    PurchaseItem[] @relation("PurchaseToPurchaseItem") // No onDelete here

  createdAt DateTime @default(now()) // Creation timestamp
  updatedAt DateTime @updatedAt // Update timestamp
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  Branch    Branch?  @relation(fields: [branchId], references: [id])
  branchId  Int?
}

//  TODO:need to change add frameType and all add fields to the purchase items
model PurchaseItem {
  id         Int    @id @default(autoincrement())
  purchaseId Int // Foreign key to Purchase
  productId  Int // Foreign key to Product model
  quantity   Int // Product quantity
  rate       Float // Rate per product
  amount     Float // Total amount for the product (rate * quantity)
  cgst       Float? // CGST for the product
  sgst       Float? // SGST for the product
  discount   Float? @default(0)

  purchase Purchase @relation("PurchaseToPurchaseItem", fields: [purchaseId], references: [id], onDelete: Cascade) // Enable cascading delete
  Product  Product  @relation(fields: [productId], references: [id])
}

model ExpenseCategory {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  expenses   Expense[] // One-to-many relationship
}

model Expense {
  id          Int             @id @default(autoincrement())
  amount      Float
  description String
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt
  categoryId  Int // Foreign key reference
  category    ExpenseCategory @relation(fields: [categoryId], references: [id]) // Establishing the relationship
}

model CustomerInvoice {
  id               Int      @id @default(autoincrement())
  customerName     String
  customerPhone    String
  customerLocation String
  orderNo          String   @unique
  orderDate        DateTime
  testedBy         String?
  grandTotal       Float
  advance          Float
  discount         Float    @default(0)
  balance          Float

  // Eye prescription fields
  prescription Json // Store the prescription as a JSON object for flexibility

  // Product details
  products Json // Store an array of products with fields like name, price, quantity, etc.

  // Relations for optional fields (e.g., brands, frame types, shape types)
  brandId Int?
  brand   Brands? @relation(fields: [brandId], references: [id])

  frameTypeId Int?
  frameType   FrameType? @relation(fields: [frameTypeId], references: [id])

  shapeId Int?
  shape   ShapeType? @relation(fields: [shapeId], references: [id])

  // Common invoice calculations
  rate           Float?
  quantity       Int?
  discountAmount Float  @default(0)
  amount         Float
  totalAmount    Float

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product   Product? @relation(fields: [productId], references: [id])
  productId Int?
}

model Prescription {
  id        Int      @id @default(autoincrement())
  rightSPH  Float
  rightCYL  Float
  rightAXIS Float
  rightADD  Float
  leftSPH   Float
  leftCYL   Float
  leftAXIS  Float
  leftADD   Float
  lensType  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
