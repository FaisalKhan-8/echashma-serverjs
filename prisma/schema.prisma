generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver" // Specify SQL Server as the provider
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  name       String?
  email      String    @unique
  password   String
  avatar     String?   @default("https://img.freepik.com/free-vector/illustration-businessman_53876-5856.jpg")
  role       String    @default("SUBADMIN") // Changed to String for roles
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  uuid       String    @unique @default(uuid())
  companies  Company[] @relation("UserCompanies")
  branches   Branch[]  @relation("UserBranches")
}

model Company {
  id            Int      @id @default(autoincrement())
  companyName   String   @unique
  address       String
  contactPerson String
  phone         String
  email         String   @unique
  gst           String?  @unique // Optional: Review uniqueness requirement
  pancard       String
  aadhaarcard   String
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now()) @updatedAt
  uuid          String   @unique @default(uuid())

  users    User[]   @relation("UserCompanies")
  branches Branch[] @relation("CompanyBranches") // Relationship to Branch model
}

model Branch {
  id            Int      @id @default(autoincrement())
  branchName    String
  address       String
  phone         String
  email         String?  @unique
  contactPerson String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  uuid          String   @unique @default(uuid())

  company   Company   @relation("CompanyBranches", fields: [companyId], references: [id])
  companyId Int // Foreign key to Company
  users     User[]    @relation("UserBranches") // Many-to-many relation with User
  products  Product[] @relation("BranchProducts") // Many-to-many relation with Product
}

model Product {
  id            Int            @id @default(autoincrement())
  code          String // Code from the Excel, like 1 for Specs, 2 for Sunglasses, etc.
  name          String // Name of the product
  frameTypeId   Int // Foreign key to FrameType
  frameType     FrameType      @relation(fields: [frameTypeId], references: [id])
  shapeTypeId   Int // Foreign key to ShapeType
  shapeType     ShapeType      @relation(fields: [shapeTypeId], references: [id])
  visionTypeId  Int // Foreign key to VisionType
  visionType    VisionType     @relation(fields: [visionTypeId], references: [id])
  coatingTypeId Int // Foreign key to CoatingType
  coatingType   CoatingType    @relation(fields: [coatingTypeId], references: [id])
  created_at    DateTime       @default(now())
  updated_at    DateTime       @default(now()) @updatedAt
  branches      Branch[]       @relation("BranchProducts") // Many-to-many relation with Branch
  suppliers     Supplier[]     @relation("ProductSuppliers") // Many-to-many relation with Supplier
  PurchaseItem  PurchaseItem[]
}

model Supplier {
  id            Int      @id @default(autoincrement())
  code          String
  name          String // Supplier name
  address       String // Supplier address
  contactPerson String // Contact person for the supplier
  contactNo     String // Contact number for the supplier
  email         String   @unique // Supplier's email
  gstin         String?  @unique // Optional GSTIN number
  uin           String? // Optional UIN number
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  uuid          String   @unique @default(uuid())

  products Product[]  @relation("ProductSuppliers") // Many-to-many relation with Product

  Purchase Purchase[]
}

model FrameType {
  id       Int       @id @default(autoincrement())
  code     String
  name     String // Rimless, Metallic, Sheet, etc.
  products Product[] // Relation to products
}

model ShapeType {
  id       Int       @id @default(autoincrement())
  code     String
  name     String // Round, Square, Hexagon, etc.
  products Product[] // Relation to products
}

model VisionType {
  id       Int       @id @default(autoincrement())
  code     String
  name     String // Single Vision, Bi-Focal, Progressive, etc.
  products Product[] // Relation to products
}

model CoatingType {
  id       Int       @id @default(autoincrement())
  code     String
  name     String
  products Product[] // Relation to products
}

model Purchase {
  id           Int      @id @default(autoincrement())
  purchaseDate DateTime // Purchase date
  billNo       String // Bill number
  supplierId   Int // Foreign key to Supplier model
  totalAmount  Float // Total purchase amount
  totalCGST    Float? // CGST amount
  totalSGST    Float? // SGST amount
  netTotal     Float // Final net total

  supplier Supplier       @relation(fields: [supplierId], references: [id])
  items    PurchaseItem[] @relation("PurchaseToPurchaseItem") // No onDelete here

  createdAt DateTime @default(now()) // Creation timestamp
  updatedAt DateTime @updatedAt // Update timestamp
}

model PurchaseItem {
  id         Int    @id @default(autoincrement())
  purchaseId Int // Foreign key to Purchase
  productId  Int // Foreign key to Product model
  quantity   Int // Product quantity
  rate       Float // Rate per product
  amount     Float // Total amount for the product (rate * quantity)
  cgst       Float? // CGST for the product
  sgst       Float? // SGST for the product
  discount   Float?  @default(0)

  purchase Purchase @relation("PurchaseToPurchaseItem", fields: [purchaseId], references: [id], onDelete: Cascade) // Enable cascading delete
  Product  Product  @relation(fields: [productId], references: [id])
}


model ExpenseCategory {
  id          Int      @id @default(autoincrement())
  name        String
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
  expenses    Expense[] // One-to-many relationship
}

model Expense {
  id              Int      @id @default(autoincrement())
  amount          Float
  description     String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  categoryId      Int      // Foreign key reference
  category        ExpenseCategory @relation(fields: [categoryId], references: [id]) // Establishing the relationship
}
