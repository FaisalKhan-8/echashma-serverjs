generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Roles {
  ADMIN
  SUBADMIN
}

model User {
  id         Int      @id @default(autoincrement())
  name       String?
  email      String   @unique
  password   String
  avatar     String?
  role       Roles    @default(SUBADMIN)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  uuid       String   @unique @default(uuid())

  companies Companies[] @relation("UserCompanies")
  branches  Branch[]    @relation("UserBranches")
}

model Companies {
  id            Int      @id @default(autoincrement())
  companyName   String   @unique
  address       String
  contactPerson String
  phone         String
  email         String   @unique
  gst           String?  @unique
  pancard       String
  aadhaarcard   String
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
  uuid          String   @unique @default(uuid())

  users    User[]   @relation("UserCompanies")
  branches Branch[] @relation("CompanyBranches") // Relationship to Branch model
}

model Branch {
  id            Int      @id @default(autoincrement())
  branchName    String
  address       String
  phone         String
  email         String?  @unique
  contactPerson String
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
  uuid          String   @unique @default(uuid())

  company   Companies @relation("CompanyBranches", fields: [companyId], references: [id])
  companyId Int // Foreign key to Companies
  users     User[]    @relation("UserBranches") // Many-to-many relation with User
  products  Product[] @relation("BranchProducts") // Many-to-many relation with Product
}

model Product {
  id            Int         @id @default(autoincrement())
  code          Int // Code from the Excel, like 1 for Specs, 2 for Sunglasses, etc.
  name          String // Name of the product
  frameTypeId   Int // Foreign key to FrameType
  frameType     FrameType   @relation(fields: [frameTypeId], references: [id])
  shapeTypeId   Int // Foreign key to ShapeType
  shapeType     ShapeType   @relation(fields: [shapeTypeId], references: [id])
  visionTypeId  Int // Foreign key to VisionType
  visionType    VisionType  @relation(fields: [visionTypeId], references: [id])
  coatingTypeId Int // Foreign key to CoatingType
  coatingType   CoatingType @relation(fields: [coatingTypeId], references: [id])
  created_at    DateTime    @default(now())
  updated_at    DateTime    @default(now())
  branches      Branch[]    @relation("BranchProducts") // Many-to-many relation with Branch
  suppliers     Supplier[]  @relation("ProductSuppliers") // Many-to-many relation with Supplier
}

model Supplier {
  id            Int      @id @default(autoincrement())
  name          String // Supplier name
  address       String // Supplier address
  contactPerson String // Contact person for the supplier
  contactNo     String // Contact number for the supplier
  email         String   @unique // Supplier's email
  gstin         String?  @unique // Optional GSTIN number
  uin           String? // Optional UIN number
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
  uuid          String   @unique @default(uuid())

  products Product[] @relation("ProductSuppliers") // Many-to-many relation with Product
}

model FrameType {
  id       Int       @id @default(autoincrement())
  name     String // Rimless, Metallic, Sheet, etc.
  products Product[] // Relation to products
}

model ShapeType {
  id       Int       @id @default(autoincrement())
  name     String // Round, Square, Hexagon, etc.
  products Product[] // Relation to products
}

model VisionType {
  id       Int       @id @default(autoincrement())
  name     String // Single Vision, Bi-Focal, Progressive, etc.
  products Product[] // Relation to products
}

model CoatingType {
  id       Int       @id @default(autoincrement())
  name     String // Without Anti-Glare, Blue Block, etc.
  products Product[] // Relation to products
}
